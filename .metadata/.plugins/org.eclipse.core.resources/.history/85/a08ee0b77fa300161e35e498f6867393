package controllers;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.InputMismatchException;
import java.util.Scanner;

import entity.Menu;
import entity.MenuItem;
import entity.OrderSheetPerTable;
import entity.Table;
import entity.TableAll;

public class OrderController {
	private TableAll tIR;
	private Menu menuToOrderFrom;
	
	public OrderController(){
		tIR = TableController.TableRecords;
		menuToOrderFrom = MenuController.menu;
	}
	
	public void run() throws InputMismatchException {
        boolean x = true;
        Scanner input = new Scanner(System.in);
        while (x) {
            boolean y = true;
            this.displayMenuOptions();
            int choice = input.nextInt();
            switch (choice) {
                case (1):
                    do {
                        try {
                            this.addOrderToOrderSheet();
                            y = false;
                        } catch (InputMismatchException e) {
                            System.out.println("Invalid option");
                        }
                    } while (y);
                    break;
                /*case (2):
                    do {
                        try {
                            this.updateMenuItem();
                            y = false;
                        } catch (InputMismatchException e) {
                            System.out.println("Invalid option");
                        }
                    } while (y);
                    break;

                case (3):
                    do {
                        try {
                            this.deleteMenuItem();
                            y = false;
                        } catch (InputMismatchException e) {
                            System.out.println("Invalid Input. 3");
                        } catch (ArrayIndexOutOfBoundsException e) {
                            System.out.println("There is no such option!");
                        }
                    } while (y);
                    break;
                case (4):
                    menu.printMenuItem();
                    break;*/
                case (-1):
                    return;
                default:
                    System.out.println("Please select a valid option");
            }
        }
    }
	
	public void displayMenuOptions(){
		System.out.println("Please select option: (Enter -1 to return)");
		System.out.println("1. Add Order"); //Each table must initialise order sheet first before orders can be added in.  
		System.out.println("2. Update pre-exisiting order");
		System.out.println("3. Remove pre-exisiting order");
	}
	
	
	public void addOrderToOrderSheet(){
		//1. Ask for table number
		//2. Check if table has been initialised. If have proceed, if havent, must initialise ordersheet first. Input required: staffId, date, table Num)
		//3. Once init, drop down menu, get input for which item. Change status of table to 'occupied'
		//4. Ask for quantity
		//5. Add item to that tables ordersheet. 
		Date today = new GregorianCalendar().getTime();
		Scanner input = new Scanner(System.in);
		boolean x = true;
		boolean y = true;
		System.out.println("Add order");
		
		while(x){
			int tableNumber=0;
			do{
				System.out.println("Please enter table number first: (Enter -1 to go back)");
				try{
					tableNumber = input.nextInt();
					y = false;
				}catch(InputMismatchException e){
					System.out.println("Please input a number");
				}
			}while(y);
			if(tableNumber ==-1)continue;
			//Get table object with corresponding table number
			y = true;
			Table tempTable = null;
			do{
				try{
					tempTable = tIR.getAllTheTables().get(tableNumber-1);
					y = false;
				}catch(ArrayIndexOutOfBoundsException e){
					System.out.println("Table does not exist");
				}
			}while(y);
			//Check if orderSheet for table has been initialised;
			y = true;
			if(tempTable.getOrderSheet() == null){
				System.out.println("This table has no order sheet yet. Please enter staff ID to create order sheet. (Enter -1 to return)");
				int staffId=0;
				do{
					try{
						staffId = input.nextInt();
						y = false;
					}catch(InputMismatchException e){
						System.out.println("Invalid staff ID");
					}
				}while(y);
				if(staffId == -1)continue;
				
				tempTable.initOrderSheet(tempTable.getTableNumber(), staffId, today);
				System.out.println("Order sheet created for table: "+ tempTable.getTableNumber());
			}
			OrderSheetPerTable orderSheetTemp = tempTable.getOrderSheet();
			System.out.println("Choose item to add into order sheet:");
			menuToOrderFrom.printMenuItem();
			
			MenuItem tempMenuItem = null;
			do{
				tempMenuItem = MenuController.selectMenuItem();
			}while(tempMenuItem!=null);
			System.out.println("Please input quantity");
			int quantity=0;
			y = true;
			do{
				try{
					quantity = input.nextInt();
					y = false;
				}catch(InputMismatchException e){
					System.out.println("Please enter a number.");
				}
			}while(y);
			if(quantity<0)continue;
			orderSheetTemp.addOrder(tempMenuItem, quantity);
			orderSheetTemp.printOrder();
			
		}
		
		
		
		
	}
	
	public void initOrderSheet(){
		
	}
	
	
}
