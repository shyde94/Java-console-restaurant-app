package controllers;
import entity.ReservationAll;

import entity.Table;
import entity.TableAll;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.InputMismatchException;


import entity.Reservation;

public class ReservationController{
	
	private ReservationAll allTheReservations;
	private TableAll allTheTables;
	
	
	public ReservationController(){
		allTheReservations = new ReservationAll();
		allTheTables = new TableAll(5,8,10,10);
	}
	
	public void run() throws InputMismatchException{ 
		boolean x = true; 
		Scanner input = new Scanner(System.in);
		while(x){
			boolean y = true;
			this.displayMenuOptions();
			int choice = input.nextInt();
			switch(choice){
				case(1):
					do{
						try{
							this.createReservation();
							y = false;
						}
						catch(InputMismatchException e){
							System.out.println("Invalid option");
						}
					}while(y);
					break;
				case(2): 
					do{
						try{
							this.checkReservation();
							y = false;
						}
						catch(InputMismatchException e){
							System.out.println("Invalid option");
						}
					}while(y);
					break;
					
				case(3): 
					do{
						try{
							this.removeReservation();
							y = false;
						}
						catch(InputMismatchException e){
							System.out.println("Invalid Input. 3");
						}
						catch(ArrayIndexOutOfBoundsException e){
							System.out.println("There is no such option!");
						}
					}while(y);
					break;
				case(-1):return;
				default: System.out.println("Please select a valid option");
			}
		}
	}
	
	public void createReservation() {
		//1. get date and time as input
		//2. check that not same day or max 1 month
		//3. check reservations on that day by comparing with tables. 
		//3. If unreserved tables exist, ask for pax
		//4. Search for tables that have at most pax + 3 seats. 
		//5. If have, input name, hp number. 
		//6. Create reservation 
		
		
		Scanner input = new Scanner(System.in);
		String inputDate; String inputTime;
		Calendar date;
		boolean x = true;
		while(x){
			allTheReservations.createReservation(0, 2, "97811150", "Foo Shi De", "01-10-2016", "1600");
			allTheReservations.createReservation(1, 2, "97811150", "Foo Shi De", "01-10-2016", "1600");
			allTheReservations.createReservation(2, 2, "97811150", "Foo Shi De", "01-10-2016", "1600");
			allTheReservations.createReservation(3, 2, "97811150", "Foo Shi De", "01-10-2016", "1600");
			allTheReservations.createReservation(4, 2, "97811150", "Foo Shi De", "01-10-2016", "1600");
			int cont = 0;
			
			do{
				System.out.println("###### Create Reservation ######");
				System.out.println("Input date to reserve on: (Enter -1 to go back)");
				inputDate = input.next();		//Get input date from user
				if (inputDate.equals("-1"))return;
				System.out.println("Input time of arrival: (Enter -1 to go back)");
				inputTime = input.next();	 	//Get input time from user
				if (inputTime.equals("-1"))return;
				//String atThisMoment = returnNowInString("dd-MM-yyyy");
				Calendar today = new GregorianCalendar();		//Get current date and time
				try {
					Calendar dntFromUser = stringToCalender("dd-MM-yyyy HHmm", inputDate,inputTime);	//Convert input date & time to calendar object           
					Calendar oneMonthFromNow = new GregorianCalendar(); 
					oneMonthFromNow.add(Calendar.DAY_OF_MONTH,30);//Get date one month from now
					if(dntFromUser.compareTo(today)<=0 || dntFromUser.compareTo(oneMonthFromNow)==1 || today.compareTo(oneMonthFromNow) ==1){
						System.out.println("You cannot reserve on this date");
					}
					else{
						System.out.println("Please wait...");
						cont = 1;
						x = false;
					}
				} catch (ParseException e) {
					System.out.println("Please enter date in the format dd-mm-yyyy, and time in HHMM.");
					input.nextLine();
				}
			}while(x);
			if(cont==1){
				//indexOfReserved contains all the tableNumbers that are reserved on the inputDate. 
				//Compare that with all the tables, seive out those not in indexOfReserved == unreserved tables!
				ArrayList<Integer> indexOfReserved = allTheReservations.reservedTablesOnDate(inputDate); //Contains all tables numbers that are reserved on input date
				ArrayList<Table> unReservedTables = new ArrayList<Table>(); //ArrayList to store unreserved tables
				ArrayList<Table> tempTableAll = allTheTables.getAllTheTables();
				
				for(int i = 0; i<allTheTables.getTotalNumOfTables();i++){
					if(!(indexOfReserved.contains(tempTableAll.get(i).getTableNumber()))){
						Table temp = tempTableAll.get(i);
						unReservedTables.add(temp);
						temp.displayTable();
					}
				}
				System.out.println("Enter handphone number: (Enter -1 to return)");
				String handphone = input.next();
				if(handphone.equals("-1"))break;
				System.out.println("Enter name: (Enter -1 to return)");
				input.nextLine();
				String name = input.nextLine();
				if(name.equals("-1"))break;
				cont = 0;
				System.out.println("Enter number of people: (Enter -1 to return)");
				int numpax=0;
					do{
						try{
							numpax = input.nextInt();
							cont=1;
						}
						catch(InputMismatchException e){
							System.out.println("Please enter a number");
						}
					}while(cont==0);
					if(numpax == -1)break;
					//allTheReservations.createReservation(0, 2, "97811150", "Foo Shi De", "01-10-2016", "1600");
					System.out.println("Name:" + name+ " handphone: " + handphone + " numpax: " + numpax);
					
				
				
					
				}
				
				
				
			}
		}		
		
	}

	public void checkReservation() {
		Scanner input = new Scanner(System.in);
		System.out.println("Enter date to check: ");
		String dateInput = input.next();
		allTheReservations.checkReservationsOnDate(dateInput);
		
	}

	public void removeReservation() {
		//1. input name and handphone number
		//2. check reservationList for match
		//3. if no match, nothing changed
		//4. if more than 1 match, select which to remove
		Scanner input = new Scanner(System.in);
		String name, number; 
		ArrayList<Reservation> rAll = allTheReservations.getReservationList();	
		boolean x = true;
		while(x){
			System.out.println("##### Remove reservation ######");
			System.out.println("Enter name: (Enter -1 to go back) ");
			name = input.nextLine();
			if(name.equals("-1")) return;
			System.out.println("Enter handphone number: (Enter -1 to go back)");
			number = input.nextLine();
			if(name.equals("-1")) return;
			System.out.println("name:" + name + " number: "+ number);
			
			ArrayList<Reservation> tempList = new ArrayList<Reservation>();
			for(int i=0;i<rAll.size();i++){
				Reservation temp = rAll.get(i);
				if(temp.getCustomerName().equals(name) && temp.getHpNumber().equals(number)){
					tempList.add(temp);
				}
			}
			if(tempList.isEmpty()){
				System.out.println("There are no reservations under this name"); return;
			}else{
				System.out.println("Reservations made under this name: ");
				for(int i=0;i<tempList.size();i++){
					tempList.get(i).printReservation();
				}
				int choice = 0;
				boolean y = true; boolean z = true;
				do{
					do{
						try{
							System.out.println("Select reservation to remove: (Enter -1 to go back)");
							choice = input.nextInt();
							y = false;
						}
						catch(InputMismatchException e){
							System.out.println("Invalid option");
						}
					}while(y);
					if(choice == -1) return;
					try{
						Reservation todelete = tempList.get(choice);
						allTheReservations.deleteReservation(todelete); 
						z = false;
						System.out.println("This reservation has been removed");
						return;
					}
					catch(ArrayIndexOutOfBoundsException e){
						System.out.println("Invalid choice entered.");
					}
					
				}while(z);								
			}
		}		
	}
	

	public void displayMenuOptions(){		//Display main menu options
		System.out.println("Menu Options (Enter -1 to go back)");
		System.out.println("1. Create new reservation");
		System.out.println("2. Check reservation");
		System.out.println("3. Remove reservation");
	}
	
	public Calendar stringToCalender(String format, String inputDate, String inputTime) throws ParseException{
		SimpleDateFormat sdf = new SimpleDateFormat();
		sdf.applyPattern(format);
		Date reservationDate = sdf.parse(inputDate + " " + inputTime);
		
		Calendar calendar = Calendar.getInstance();
		
		calendar.setTime(reservationDate);
		
		System.out.println("Date and time: "+ calendar.getTime());
		return calendar;
	}
}